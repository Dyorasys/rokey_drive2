# 2025-02-12
# 잘 감
# 특정 시작 위치에서 골과 같아짐
# stuck 개선 필요

import rclpy
from rclpy.node import Node
from nav_msgs.msg import OccupancyGrid
from geometry_msgs.msg import PoseStamped
from rclpy.qos import QoSProfile
from rclpy.qos import QoSDurabilityPolicy
from rclpy.qos import QoSHistoryPolicy
from geometry_msgs.msg import PoseWithCovarianceStamped


import numpy as np

class mapping(Node):
    def __init__(self):
        super().__init__('mapping_node')
        #QOS_ = QoSProfile(depth=10,history=QoSHistoryPolicy.KEEP_LAST,durability=QoSDurabilityPolicy.VOLATILE)
        # map data 가져오기
        self.sub_costmap = self.create_subscription(OccupancyGrid, '/map', self.map_callback, 10)
        self.sub_costmap
        
        self.pub_goal = self.create_publisher(PoseStamped, '/goal_pose', 10)

        self.sub_pose = self.create_subscription(PoseWithCovarianceStamped, '/pose', self.pose_callback, 10)
        self.sub_pose
    
    def pose_callback(self,data):
        self.x = data.pose.pose.position.x
        self.y = data.pose.pose.position.y
        
    def map_callback(self, data):
        resolution = data.info.resolution
        origin_x = self.x
        origin_y = self.y
        fx = data.info.origin.position.x
        fy = data.info.origin.position.y

        po = PoseStamped()
        
        pp = []
        dist = []
        mask = np.ones([7, 7])
        
        near = [[-1,-1],[-1,0],[-1,1],[0,-1],[0,1],[1,-1],[1,0],[1,1]]
        w = data.info.width
        h = data.info.height
        a = np.reshape(data.data,(h, w))
        searched = np.where(a == 0)

        #start_position = np.array([searched[0][len(searched[0])//2],searched[1][len(searched[0])//2]])
        #mid = len(searched[0])//2
        # 0인 지점을 확인
        for k in range(len(searched[0])):
            # 패딩 적용시 밖으로 안나가는 지점
            if 3 < searched[0][k] < h-4 and 3 < searched[1][k] < w-4:
                # 8방향 확인
                for i in near:
                    # 근처에 -1인 지점이 있으면
                    if a[searched[0][k]+i[0]][searched[1][k]+i[1]] == -1:
                        # 5*5 근처에 벽이 없으면
                        if 100 not in (a[searched[0][k]-3:searched[0][k]+4,searched[1][k]-3:searched[1][k]+4] * mask):
                            #nx = int(searched[0][k] - origin_x//resolution)
                            #ny = int(searched[1][k] - origin_y//resolution)
                            nx = searched[1][k]
                            ny = searched[0][k]

                            # 위치
                            pp.append([nx, ny])
                            # 현재 위치로부터의 거리
                            dist.append((nx*resolution)**2+(ny*resolution)**2)
                            break
                        else:
                            break
        
        # 현재 위치에서 가장 가까운 점
        minp = dist.index(min(dist))


        if len(pp) >= 5:
            #x = origin_x + (pp[0][0] - start_position[0]) * resolution
            #y = origin_y + (pp[0][1]- start_position[1]) * resolution
            x = origin_x + pp[minp][0] * resolution
            y = origin_y+ pp[minp][1] * resolution
            #x = fx + pp[minp][0] * resolution
            #y = fy+ pp[minp][1] * resolution
            po.pose.position.x = x
            po.pose.position.y = y
            po.pose.position.z = 0.0
            po.pose.orientation.w = 1.0
            po.header.frame_id = 'map'
            po.header.stamp = self.get_clock().now().to_msg()
            print('------------')
            print(f'resol = {resolution}')
            print(f'map : x = {fx}, y = {fy}')
            print(f'real : x = {origin_x}, y = {origin_y}')
            print(f'goal : x = {x}, y = {y}')

            self.pub_goal.publish(po)
            
        else:
            print('done')
            po.pose.position.x = origin_x
            po.pose.position.y = origin_y
            po.pose.position.z = 0.0
            po.pose.orientation.w = 1.0
            po.header.frame_id = 'map'
            po.header.stamp = self.get_clock().now().to_msg()
            
            self.pub_goal.publish(po)

        '''
        print('------------')
        print(f'resol = {resolution}')
        print(f'map : x = {fx}, y = {fy}')
        print(f'real : x = {origin_x}, y = {origin_y}')
        print(f'goal : x = {fx + pp[minp][0] * resolution}, y = {fy+ pp[minp][1] * resolution}')
        '''
        
        


def main(args=None):
    rclpy.init(args=args)
    image_subscriber = mapping()

    try:
        rclpy.spin(image_subscriber)
    except:
        pass
    finally:
        rclpy.shutdown()

if __name__ == '__main__':
    main()