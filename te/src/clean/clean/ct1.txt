# 2025-0213
# 청소
# 잘 안됨

import rclpy
from rclpy.node import Node
from nav_msgs.msg import OccupancyGrid
from geometry_msgs.msg import PoseStamped
from rclpy.qos import QoSProfile
from rclpy.qos import QoSDurabilityPolicy
from rclpy.qos import QoSHistoryPolicy


import numpy as np

class mapping(Node):
    def __init__(self):
        super().__init__('mapping_node')
        #QOS_ = QoSProfile(depth=10,history=QoSHistoryPolicy.KEEP_LAST,durability=QoSDurabilityPolicy.VOLATILE)
        # map data 가져오기
        self.sub_costmap = self.create_subscription(OccupancyGrid, '/map', self.map_callback, 10)
        
        self.pub_goal = self.create_publisher(PoseStamped, '/goal_pose', 10)

        # data of cleaned
        self.cleaned = []

        self.initial_position = None
        self.last_goal = None

    def map_callback(self, data):

        resolution = data.info.resolution
        #origin_x = self.x
        #origin_y = self.y
        fx = data.info.origin.position.x
        fy = data.info.origin.position.y
        if self.initial_position is None:
            self.initial_position = (fx,fy)

        po = PoseStamped()
        
        pp = []
        
        #near = [[-1,-1],[-1,0],[-1,1],[0,-1],[0,1],[1,-1],[1,0],[1,1]]
        w = data.info.width
        h = data.info.height
        map_array = np.reshape(data.data,(h, w))
        # copy map data
        
        mask = int((1/resolution))
        
        # 패딩
        padded = np.pad(map_array, ((mask,mask),(mask,mask)), 'constant', constant_values=100)
        
        # 청소된 구역 표시
        for i in self.cleaned:
            # mask//2 * mask//2 구역은 청소로 표시
            padded[i[1]-mask : i[1]+mask+1, i[0]-mask : i[0]+mask+1] += 1

        

        # 청소 안된 지점 확인
        searched = np.where(padded == 0)
        # 현재 위치에서 가장 가까운 청소 안되는 지점으로 이동하며 청소
        for k in range(len(searched[0])):
            
            nx, ny = searched[1][k], searched[0][k]

            # boundary check
            
            pp.append([fx + (nx+0.5) * resolution, fy + (ny+0.5) * resolution])   
        
        # 현재 위치에서 가장 가까운 점

        if len(pp) >= 5:
           

            if self.last_goal is not None:
                ref_x, ref_y = self.last_goal  # 마지막 목표 좌표를 기준으로 탐색
            else:
                ref_x, ref_y = self.initial_position  # 초기 위치를 기준으로 선택
            
            # 가장 가까운 위치
            best_goal = min(pp, key=lambda p: (p[0], np.hypot(p[0] - ref_x, p[1] - ref_y)))
            # 현재 위치 인덱스
            best_index_x = int(fx//resolution)
            best_index_y = int(fy//resolution)
            # goal(float)
            po.pose.position.x = best_goal[0]
            po.pose.position.y = best_goal[1]
            po.pose.position.z = 0.0
            po.pose.orientation.w = 1.0
            po.header.frame_id = 'map'
            po.header.stamp = self.get_clock().now().to_msg()
            # 중복 방지
            flag = 0
            for i in self.cleaned:
                if i[0] == best_index_x and i[1] == best_index_y:
                    flag = 1
                    break
            
            if flag == 0:
                self.cleaned.append([best_index_x,best_index_y])

            print('------------')
            print(f'resol = {resolution}')
            print(f'map : x = {fx}, y = {fy}')
            #print(f'real : x = {best_goal[0]}, y = {best_goal[1]}')
            print(f'goal : x = {best_goal[0]}, y = {best_goal[1]}')
            print(f'current index : x = {best_index_x}, y = {best_index_y}')
            print(f'goal index : x = {int((best_goal[0]-fx)/resolution+0.5)}, y = {int((best_goal[1]-fy)/resolution+0.5)}')
            print(f'len : {len(self.cleaned)}')

            self.last_goal = (best_goal[0],best_goal[1])

            self.pub_goal.publish(po)
            
        else:
            print('done')
            # 끝나면 노드 종료?
            super().destroy_node()

        '''
        print('------------')
        print(f'resol = {resolution}')
        print(f'map : x = {fx}, y = {fy}')
        print(f'real : x = {origin_x}, y = {origin_y}')
        print(f'goal : x = {fx + pp[minp][0] * resolution}, y = {fy+ pp[minp][1] * resolution}')
        '''
        
        


def main(args=None):
    rclpy.init(args=args)
    image_subscriber = mapping()

    try:
        rclpy.spin(image_subscriber)
    except:
        pass
    finally:
        rclpy.shutdown()

if __name__ == '__main__':
    main()